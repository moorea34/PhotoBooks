package photobooks.hsqldbgateways;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import photobooks.gateways2.IGateway;
import photobooks.gateways2.IPhoneNumberGateway;
import photobooks.objects.Client;
import photobooks.objects.PhoneNumber;

public class HSQLDBClientGateway extends HSQLDBGateway<Client> implements IGateway<Client> {
	
	//Table
	private static final String CLIENT_TABLE = "CLIENT";
	
	//Columns	
	private static final String ID = "ID";
	private static final String FIRST_NAME = "FIRSTNAME";
	private static final String LAST_NAME = "LASTNAME";
	private static final String BIRTHDAY = "BIRTHDAY";
	private static final String ANNIVERSARY = "ANNIVERSARY";
	private static final String EMAIL = "EMAIL";
	private static final String DIRECTORY = "DIRECTORY";
	
	private static final String ADDRESS = "ADDRESS";
	private static final String CITY = "CITY";
	private static final String PROVINCE = "PROVINCE";
	private static final String POSTALCODE = "POSTALCODE";
	private static final String ACCOUNTBALANCE = "ACCOUNTBALANCE";

	
	public HSQLDBClientGateway(HSQLDBDao dao) {
		super(dao, CLIENT_TABLE);
	}
	
	//Ensures the table exists and is ready
	@Override
	public boolean initialize() {
		if (!_dao.tableExists(CLIENT_TABLE)) {
			String query = String.format("CREATE TABLE %s(%s INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,%s VARCHAR(75),%s VARCHAR(75),%s TIMESTAMP,%s TIMESTAMP,%s VARCHAR(300),%s VARCHAR(1000),%s VARCHAR(200) DEFAULT '',%s VARCHAR(200) DEFAULT '',%s VARCHAR(200) DEFAULT '',%s VARCHAR(100) DEFAULT '',%s DOUBLE DEFAULT 0.0E0)",
					CLIENT_TABLE, ID, FIRST_NAME, LAST_NAME, BIRTHDAY, ANNIVERSARY, EMAIL, DIRECTORY, ADDRESS, CITY, PROVINCE, POSTALCODE, ACCOUNTBALANCE);
			
			try {
				_statement.executeUpdate(query);
				HSQLDBDao.logWarnings(_statement);
			}
			catch (Exception e) {
				System.out.println("Failed to create client table: " + e.getMessage());
				return false;
			}
		}
		
		return _statement != null;
	}

	/* Selects a subset of objects from the table
	 * 
	 * offset: Number of objects to skip
	 * count: Number of objects to get
	 * filter: String to filter objects by (gateway implementation specific)
	 * orderBy: Comma separated list of columns to order by
	 * orderDesc: True to return collection in descending order otherwise ascending (only if orderBy parameter is specified)
	 * 
	 * Returns the list of items found. On error returns null.
	 * */
	@Override
	public ArrayList<Client> select(int offset, int count, String filter, String orderBy, boolean orderDesc) {
		String str;
		String where = null;
		
		if (filter != null && !filter.isEmpty()) {
			str = formatApostrophe(filter);
			
			where = String.format("%s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%' OR %s LIKE '%%%s%%'",
					FIRST_NAME, str, LAST_NAME, str, EMAIL, str, DIRECTORY, str,
					ADDRESS, str, CITY, str, PROVINCE, str, POSTALCODE, str);
		}
		
		return select(offset, count, orderBy, orderDesc, where);
	}

	//Adds a new object to the table, newObj's id will be set to the new objects id
	@Override
	public boolean add(Client newObj) {
		if (newObj != null) {
			boolean result = true;
			
			IPhoneNumberGateway phoneNumberGateway = _dao.phoneNumberGateway();
			ArrayList<PhoneNumber> phoneNumbers = newObj.getNumbers();
			
			String birthday = newObj.getBirthday() != null ? formatSqlString(new Date(newObj.getBirthday().getTime().getTime()).toString()) : "NULL";
			String anniversary = newObj.getAnniversary() != null ? formatSqlString(new Date(newObj.getAnniversary().getTime().getTime()).toString()) : "NULL";
			
			String clientString = String.format("INSERT INTO %s VALUES(NULL, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %.6f)", CLIENT_TABLE,
					formatSqlString(newObj.getFirstName()), formatSqlString(newObj.getLastName()),
					birthday, anniversary, formatSqlString(newObj.getEmail()), formatSqlString(newObj.getDirectory()),
					formatSqlString(newObj.getAddress()), formatSqlString(newObj.getCity()),
					formatSqlString(newObj.getProvince()), formatSqlString(newObj.getPostalCode()),
					newObj.getAccountBalance());
			
			result = result && add(clientString, newObj);
			
			for (PhoneNumber pn : phoneNumbers) {
				if (pn.getNumber() != null && !pn.getNumber().isEmpty()) {
					pn.setClientId(newObj.getID());
					result = result && phoneNumberGateway.add(pn);
				}
			}
			
			return result;
		}
		else {
			return false;
		}
	}

	//Updates an existing object in the table
	@Override
	public boolean update(Client obj) {
		if (obj != null) {
			boolean result = true;
			
			IPhoneNumberGateway phoneNumberGateway = _dao.phoneNumberGateway();
			ArrayList<PhoneNumber> phoneNumbers = obj.getNumbers();
			
			String birthday = obj.getBirthday() != null ? formatSqlString(new Date(obj.getBirthday().getTime().getTime()).toString()) : "NULL";
			String anniversary = obj.getAnniversary() != null ? formatSqlString(new Date(obj.getAnniversary().getTime().getTime()).toString()) : "NULL";
			
			String clientString = String.format("UPDATE %s SET %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %s, %s = %.6f WHERE %s = %d", CLIENT_TABLE,
					FIRST_NAME, formatSqlString(obj.getFirstName()), LAST_NAME, formatSqlString(obj.getLastName()),
					BIRTHDAY, birthday, ANNIVERSARY, anniversary, EMAIL, formatSqlString(obj.getEmail()), DIRECTORY, formatSqlString(obj.getDirectory()),
					ADDRESS, formatSqlString(obj.getAddress()), CITY, formatSqlString(obj.getCity()),
					PROVINCE, formatSqlString(obj.getProvince()), POSTALCODE, formatSqlString(obj.getPostalCode()),
					ACCOUNTBALANCE, obj.getAccountBalance(), ID, obj.getID());
			
			result = result && update(clientString);
			
			for (PhoneNumber pn : phoneNumbers) {
				if (pn.getID() == 0) {
					if (pn.getNumber() != null && !pn.getNumber().isEmpty()) {
						pn.setClientId(obj.getID());
						result = result && phoneNumberGateway.add(pn);
					}
				}
				else {
					if (pn.getNumber() == null || pn.getNumber().isEmpty()) {
						result = result && phoneNumberGateway.delete(pn);
					}
					else {
						result = result && phoneNumberGateway.update(pn);
					}
				}
			}
			
			return result;
		}
		else {
			return false;
		}
	}
	
	//Creates Client object from result set
	@Override
	protected Client fromResultSet(ResultSet resultSet) {
		Client client = null;
		IPhoneNumberGateway phoneNumberGateway = _dao.phoneNumberGateway();
		ArrayList<PhoneNumber> phoneNumbers;
		int id;
		String firstName, lastName, email, directory, address, city, province, postalCode;
		double accountBalance;
		Timestamp tempDate;
		Calendar birthday = null, anniversary = null;
		
		try {
			id = resultSet.getInt(ID);
			firstName = unformatSqlString(resultSet.getString(FIRST_NAME));
			lastName = unformatSqlString(resultSet.getString(LAST_NAME));
			email = unformatSqlString(resultSet.getString(EMAIL));
			directory = unformatSqlString(resultSet.getString(DIRECTORY));
			
			address = unformatSqlString(resultSet.getString(ADDRESS));
			city = unformatSqlString(resultSet.getString(CITY));
			province = unformatSqlString(resultSet.getString(PROVINCE));
			postalCode = unformatSqlString(resultSet.getString(POSTALCODE));
			accountBalance = resultSet.getDouble(ACCOUNTBALANCE);
			
			tempDate = resultSet.getTimestamp(BIRTHDAY);
			
			if (tempDate != null) {
				birthday = Calendar.getInstance();
				birthday.setTimeInMillis(tempDate.getTime());
			}
			
			tempDate = resultSet.getTimestamp(ANNIVERSARY);
			
			if (tempDate != null) {
				anniversary = Calendar.getInstance();
				anniversary.setTimeInMillis(tempDate.getTime());
			}
			
			phoneNumbers = phoneNumberGateway.getByClientID(id, 0, 4, null, true);
			
			if (phoneNumbers == null) {
				throw new Exception("Failed to get clients phone numbers!");
			}
			
			client = new Client(firstName, lastName, email, (birthday != null) ? (Calendar) birthday.clone() : null, 
					(anniversary != null) ? (Calendar) anniversary.clone() : null, phoneNumbers, address, city,
							province, postalCode, accountBalance, directory);
			
			client.setID(id);
		}
		catch (Exception e) {
			HSQLDBDao.logException(e);
		}
		
		return client;
	}
}
