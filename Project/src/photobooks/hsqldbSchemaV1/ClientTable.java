package photobooks.hsqldbSchemaV1;

import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import photobooks.gateways2.ITableSchema;
import photobooks.hsqldbgateways.HSQLDBDao;
import photobooks.hsqldbgateways.HSQLDBGateway;
import photobooks.objects.Client;
import photobooks.objects.PhoneNumber;

public class ClientTable implements ITableSchema<Client> {
	
	//Table
	protected String CLIENT_TABLE = "CLIENT";
	
	//Columns	
	protected String ID = "ID";
	protected String FIRST_NAME = "FIRSTNAME";
	protected String LAST_NAME = "LASTNAME";
	protected String BIRTHDAY = "BIRTHDAY";
	protected String ANNIVERSARY = "ANNIVERSARY";
	protected String EMAIL = "EMAIL";
	protected String DIRECTORY = "DIRECTORY";
	
	protected String ADDRESS = "ADDRESS";
	protected String CITY = "CITY";
	protected String PROVINCE = "PROVINCE";
	protected String POSTALCODE = "POSTALCODE";
	protected String ACCOUNTBALANCE = "ACCOUNTBALANCE";
	
	//Statements
	protected String create = "CREATE MEMORY TABLE CLIENT(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(75),LASTNAME VARCHAR(75),BIRTHDAY TIMESTAMP,ANNIVERSARY TIMESTAMP,EMAIL VARCHAR(300),DIRECTORY VARCHAR(1000),ADDRESS VARCHAR(200) DEFAULT '',CITY VARCHAR(200) DEFAULT '',PROVINCE VARCHAR(200) DEFAULT '',POSTALCODE VARCHAR(100) DEFAULT '',ACCOUNTBALANCE DOUBLE DEFAULT 0.0E0)";

	@Override
	public String Name() {
		return CLIENT_TABLE;
	}

	@Override
	public String Create() {
		return create;
	}

	@Override
	public String InitialValues() {
		return null;
	}

	@Override
	public String select(int offset, int count, String filter, String orderBy, boolean orderDesc) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String GetByIDStatement(Client obj) {
		return String.format("SELECT * FROM %s WHERE %s = %d", CLIENT_TABLE, ID, obj.getID());
	}

	@Override
	public String InsertionStatement(Client obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String UpdateStatement(Client obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String DeleteStatement(Client obj) {
		return String.format("DELETE FROM %s WHERE %s = %d", CLIENT_TABLE, ID, obj.getID());
	}

	@Override
	public ArrayList<Client> Parse(ResultSet resultSet, HSQLDBDao dao) throws Exception {
		ArrayList<Client> clients = new ArrayList<Client>();
		Client client = null;
		int id;
		String firstName, lastName, email, directory, address, city, province, postalCode;
		double accountBalance;
		Timestamp tempDate;
		Calendar birthday = null, anniversary = null;
		
		while (resultSet.next()) {
			id = resultSet.getInt(ID);
			firstName = HSQLDBGateway.unformatSqlString(resultSet.getString(FIRST_NAME));
			lastName = HSQLDBGateway.unformatSqlString(resultSet.getString(LAST_NAME));
			email = HSQLDBGateway.unformatSqlString(resultSet.getString(EMAIL));
			directory = HSQLDBGateway.unformatSqlString(resultSet.getString(DIRECTORY));
			
			address = HSQLDBGateway.unformatSqlString(resultSet.getString(ADDRESS));
			city = HSQLDBGateway.unformatSqlString(resultSet.getString(CITY));
			province = HSQLDBGateway.unformatSqlString(resultSet.getString(PROVINCE));
			postalCode = HSQLDBGateway.unformatSqlString(resultSet.getString(POSTALCODE));
			accountBalance = resultSet.getDouble(ACCOUNTBALANCE);
			
			tempDate = resultSet.getTimestamp(BIRTHDAY);
			
			if (tempDate != null) {
				birthday = Calendar.getInstance();
				birthday.setTimeInMillis(tempDate.getTime());
			}
			
			tempDate = resultSet.getTimestamp(ANNIVERSARY);
			
			if (tempDate != null) {
				anniversary = Calendar.getInstance();
				anniversary.setTimeInMillis(tempDate.getTime());
			}
			
			//TODO: get phone numbers
			client = new Client(firstName, lastName, email, (birthday != null) ? (Calendar) birthday.clone() : null, 
					(anniversary != null) ? (Calendar) anniversary.clone() : null, new ArrayList<PhoneNumber>(), address, city,
							province, postalCode, accountBalance, directory);
			
			client.setID(id);
			
			clients.add(client);
		}
		
		return clients;
	}
}
